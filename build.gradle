/*
 * Copyright 2019 Viduus Entertainment LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
    maven {
      url 'https://plugins.gradle.org/m2/'
    }
  }
  dependencies {
    classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2'
  }
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'
if (rootProject == project) {
  apply plugin: 'org.sonarqube'
}

/* -----------------------------------------------------------------------------
 *  Configuration Section
 */

sourceCompatibility = 1.8
targetCompatibility = 1.8

project.ext.projectVersion = '0.0.2'

sonarqube {
	properties {
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.organization", "viduus"
		property "sonar.login", "$System.env.VIDUUS_SONAR_TOKEN"
	}
}

/* -----------------------------------------------------------------------------
 *  Setup Section
 */

// Account for operating system when running in debug mode
import org.gradle.internal.os.OperatingSystem
switch (OperatingSystem.current()) {
	case OperatingSystem.WINDOWS:
		break
	case OperatingSystem.LINUX:
	case OperatingSystem.MAC_OS:
		test {
			jvmArgs '-XstartOnFirstThread'
		}
		break
}

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java']
		}
	}
	test {
		java {
			srcDirs = ['src/test/java']
		}
		resources {
			srcDirs = ['src/test/resources']
		}
	}
}

/* -----------------------------------------------------------------------------
 *  Task Section
 */

//jar {
//	archiveBaseName.set(project.name)
//	version =  "${projectVersion}"
//}

 /* -----------------------------------------------------------------------------
  *  Dependency Section
  */

project.ext.lwjglVersion = "3.2.2"
project.ext.jomlVersion = "1.9.15"

repositories {
	jcenter()
	mavenCentral()
}

dependencies {
	// JUnit
	testCompile 'junit:junit:4.12'

	// JOML
	compile "org.joml:joml:${jomlVersion}"

	// LWJGL
	compile "org.lwjgl:lwjgl:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-glfw:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-jemalloc:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-opengl:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-stb:${lwjglVersion}"

	// LWJGL : Windows Natives
	runtime "org.lwjgl:lwjgl:${lwjglVersion}:natives-windows"
	runtime "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-windows"
	runtime "org.lwjgl:lwjgl-jemalloc:${lwjglVersion}:natives-windows"
	runtime "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-windows"
	runtime "org.lwjgl:lwjgl-stb:${lwjglVersion}:natives-windows"

	// LWJGL : Linux Natives
	runtime "org.lwjgl:lwjgl:${lwjglVersion}:natives-linux"
	runtime "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-linux"
	runtime "org.lwjgl:lwjgl-jemalloc:${lwjglVersion}:natives-linux"
	runtime "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-linux"
	runtime "org.lwjgl:lwjgl-stb:${lwjglVersion}:natives-linux"

	// LWJGL : Windows Natives
	runtime "org.lwjgl:lwjgl:${lwjglVersion}:natives-macos"
	runtime "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-macos"
	runtime "org.lwjgl:lwjgl-jemalloc:${lwjglVersion}:natives-macos"
	runtime "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-macos"
	runtime "org.lwjgl:lwjgl-stb:${lwjglVersion}:natives-macos"
}

/* -----------------------------------------------------------------------------
 *  Publication Section
 */

task sourceJar(type: Jar) {
	archiveClassifier.set("sources")
	from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	archiveClassifier.set("javadoc")
	from javadoc.destinationDir
}

artifacts {
//	archives jar
	archives sourceJar
	archives javadocJar
}

signing {
	sign configurations.archives
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			customizePom(pom)
			groupId 'org.viduus'
			artifactId 'lwjgl-shader-manager'
			version "${projectVersion}"

			from components.java

			// create the sign pom artifact
			pom.withXml {
				def pomFile = file("${project.buildDir}/generated-pom.xml")
				writeTo(pomFile)
				def pomAscFile = signing.sign(pomFile).signatureFiles[0]
				artifact(pomAscFile) {
					classifier = null
					extension = 'pom.asc'
				}
			}

			artifact(sourceJar) {
				classifier = 'sources'
			}
			artifact(javadocJar) {
				classifier = 'javadoc'
			}

			// create the signed artifacts
			project.tasks.signArchives.signatureFiles.each {
				artifact(it) {
					def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
					if (matcher.find()) {
						classifier = matcher.group(1)
					} else {
						classifier = null
					}
					extension = 'jar.asc'
				}
			}

			configurations.archives.allArtifacts.each {
				println it
			}
		}
	}
	repositories {
		maven {
			url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
			credentials {
				username sonatypeUsername
				password sonatypePassword
			}
		}
	}
}

def customizePom(pom) {
	pom.withXml {
		def root = asNode()

		// eliminate test-scoped dependencies (no need in maven central POMs)
		root.dependencies.removeAll { dep ->
			dep.scope == "test"
		}

		// add all items necessary for maven central publication
		root.children().last() + {
			resolveStrategy = Closure.DELEGATE_FIRST

			description 'A shader manager for lwjgl that handles variable updates, attribute binding, constant injection, and program binding.'
			name 'LWJGL Shader Manager'
			url 'https://github.com/ViduusEntertainment/lwjgl-shader-manager'
			organization {
				name 'org.viduus'
				url 'https://github.com/ViduusEntertainment'
			}
			issueManagement {
				system 'GitHub'
				url 'https://github.com/ViduusEntertainment/lwjgl-shader-manager/issues'
			}
			licenses {
				license {
					name 'Apache License 2.0'
					url 'https://github.com/ViduusEntertainment/lwjgl-shader-manager/blob/master/LICENSE'
					distribution 'repo'
				}
			}
			scm {
				url 'https://github.com/ViduusEntertainment/lwjgl-shader-manager'
				connection 'scm:git:git://github.com/ViduusEntertainment/lwjgl-shader-manager.git'
				developerConnection 'scm:git:ssh://git@github.com:ViduusEntertainment/lwjgl-shader-manager.git'
			}
			developers {
				developer {
					name 'Ethan Toney'
				}
			}
		}
	}
}

model {
	tasks.generatePomFileForMavenJavaPublication {
		destination = file("$buildDir/generated-pom.xml")
	}
	tasks.publishMavenJavaPublicationToMavenLocal {
		dependsOn project.tasks.signArchives
	}
	tasks.publishMavenJavaPublicationToMavenRepository {
		dependsOn project.tasks.signArchives
	}
}