/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.4/userguide/tutorial_java_projects.html
 */
buildscript {
  repositories {
    maven {
      url 'https://plugins.gradle.org/m2/'
    }
  }
  dependencies {
    classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2'
  }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'antlr'
//if (rootProject == project) {
  apply plugin: 'org.sonarqube'
//}

/* -----------------------------------------------------------------------------
 *  Configuration Section
 */

sourceCompatibility = 1.8
targetCompatibility = 1.8

project.ext.projectVersion = '0.0.1'

sonarqube {
	properties {
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.organization", "viduus"
		property "sonar.login", "$System.env.VIDUUS_SONAR_TOKEN"
	}
}

/* -----------------------------------------------------------------------------
 *  Setup Section
 */

// Account for operating system when running in debug mode
import org.gradle.internal.os.OperatingSystem
switch ( OperatingSystem.current() ) {
	case OperatingSystem.WINDOWS:
		break
	case OperatingSystem.LINUX:
	case OperatingSystem.MAC_OS:
		test {
			jvmArgs '-XstartOnFirstThread'
		}
		break
}

sourceSets {
	main {
		antlr {
			srcDirs = ['src']
		}
		java {
			srcDirs = ['src']
		}
	}
	test {
		java {
			srcDirs = ['test']
		}
	}
}

/* -----------------------------------------------------------------------------
 *  Task Section
 */

jar {
	baseName = "${project.name}"
	version =  "${projectVersion}"
}

generateGrammarSource << {
	copy {
		from "${buildDir}/generated-src/antlr/main"
		into "src"
	}
	cleanAntlr
}

import groovy.io.FileType

class DeleteDir extends DefaultTask {
   def baseDir = "."
   def deleteMe(Object... targets) {
       def directoryList = []
       def baseDirectory = new File(baseDir).eachFileRecurse(FileType.DIRECTORIES) {
           if (targets.contains(it.name)) {
               directoryList << it
           }
       }
       directoryList.each { dirObj -> 
           if (dirObj.exists()) {
               dirObj.deleteDir()
           }
       }
   }
}

task cleanAntlr(type: DeleteDir) {
	baseDir = 'src'
	deleteMe '.antlr'
}

 /* -----------------------------------------------------------------------------
  *  Dependency Section
  */

project.ext.lwjglVersion = "3.1.1"
project.ext.antlrVersion = "4.6"

repositories {
	jcenter()
}

dependencies {
	// JUnit
	testCompile 'junit:junit:4.12'

	// LWJGL
	compile "org.lwjgl:lwjgl:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-glfw:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-jemalloc:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-openal:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-opengl:${lwjglVersion}"
	compile "org.lwjgl:lwjgl-stb:${lwjglVersion}"

	// LWJGL : Windows Natives
	runtime "org.lwjgl:lwjgl:${lwjglVersion}:natives-windows"
	runtime "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-windows"
	runtime "org.lwjgl:lwjgl-jemalloc:${lwjglVersion}:natives-windows"
	runtime "org.lwjgl:lwjgl-openal:${lwjglVersion}:natives-windows"
	runtime "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-windows"
	runtime "org.lwjgl:lwjgl-stb:${lwjglVersion}:natives-windows"

	// LWJGL : Linux Natives
	runtime "org.lwjgl:lwjgl:${lwjglVersion}:natives-linux"
	runtime "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-linux"
	runtime "org.lwjgl:lwjgl-jemalloc:${lwjglVersion}:natives-linux"
	runtime "org.lwjgl:lwjgl-openal:${lwjglVersion}:natives-linux"
	runtime "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-linux"
	runtime "org.lwjgl:lwjgl-stb:${lwjglVersion}:natives-linux"

	// LWJGL : Windows Natives
	runtime "org.lwjgl:lwjgl:${lwjglVersion}:natives-macos"
	runtime "org.lwjgl:lwjgl-glfw:${lwjglVersion}:natives-macos"
	runtime "org.lwjgl:lwjgl-jemalloc:${lwjglVersion}:natives-macos"
	runtime "org.lwjgl:lwjgl-openal:${lwjglVersion}:natives-macos"
	runtime "org.lwjgl:lwjgl-opengl:${lwjglVersion}:natives-macos"
	runtime "org.lwjgl:lwjgl-stb:${lwjglVersion}:natives-macos"
	
	// Antlr
	antlr "org.antlr:antlr4:${antlrVersion}"
	compile group: 'org.antlr', name: 'antlr4-runtime', version: '${antlrVersion}'
}
